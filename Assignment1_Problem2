//import THREE
import * as THREE from 'https://threejsfundamentals.org/threejs/resources/threejs/r132/build/three.module.js';

// import Orbit controls
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );
camera.position.set( 0, 0, 100 );
camera.lookAt( 0, 0, 0 );

const scene = new THREE.Scene();

//create a blue LineBasicMaterial
const material = new THREE.LineBasicMaterial( { color: 0xffff00 } );
const points = [];
points.push( new THREE.Vector3( - 30, 0, 0 ) );
points.push( new THREE.Vector3( 0, 30, 0 ) );
points.push( new THREE.Vector3( 30, 0, 0 ) );
points.push( new THREE.Vector3( - 30, 0, 0 ) );

points.push( new THREE.Vector3( - 30, 0, 0 ) );
points.push( new THREE.Vector3( 30, 0, 30 ) );
points.push( new THREE.Vector3( 30, 0, 0 ) );
points.push( new THREE.Vector3( - 30, 0, 0 ) );

points.push( new THREE.Vector3( - 30, 0, 0 ) );
points.push( new THREE.Vector3( 30,0, 30 ) );
points.push( new THREE.Vector3( 0, 30, 0 ) );
points.push( new THREE.Vector3( - 30, 0, 0 ) );


const geometry = new THREE.BufferGeometry().setFromPoints( points );
const line = new THREE.Line( geometry, material );
scene.add( line );
renderer.render( scene, camera );

// Set up animation
var animate = function () {
  requestAnimationFrame(animate);

  renderer.render(scene, camera);
};

var controls = new OrbitControls (camera, renderer.domElement);


animate();
